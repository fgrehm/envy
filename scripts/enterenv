#!/bin/bash

IFS="+" read USER ENV <<< "${USER:?}"
ENV="${ENV:-$USER}"
HOST_DATA="${HOST_DATA:?}"

REPO=
if [[ $ENV =~ '/' ]]; then
  REPO="https://github.com/${ENV}.git"
fi

data-init() {
  mkdir -p /data/users
  cp /bin/envcmd /data/.envcmd
}

user-init() {
  if [[ ! -d "/data/users/$USER" ]]; then
    mkdir -p "/data/users/$USER"
    mkdir -p "/data/users/$USER/envs"
    mkdir -p "/data/users/$USER/home"
    cp -R /tmp/data/root "/data/users/$USER/root"
  fi
}

env-init() {
  if [[ ! -d "/data/users/$USER/envs/$ENV" ]]; then
    if [ -n "$REPO" ]; then
      echo "Cloning GitHub project..."
      git clone --depth 1 $REPO "/data/users/$USER/envs/$ENV"
      if ! [ -f "/data/users/$USER/envs/$ENV/Dockerfile" ]; then
        cp -R /tmp/data/env/Dockerfile.devstep "/data/users/$USER/envs/$ENV/Dockerfile"
      fi
    else
      cp -R /tmp/data/env "/data/users/$USER/envs/$ENV"
    fi
  fi
  # FIXME: This `if` should not exist, the reason why it is here is to avoid
  #        having other things that are not the cloned project itself under that
  #        directory
  if [ -z "$REPO" ]; then
    env-docker
  fi
  cd "/data/users/$USER/envs/$ENV"
  NAME="${USER}/$(echo $ENV | sed 's|/|.|g')"
  if ! docker history "$NAME" &> /dev/null; then
    echo "Building environment ... "
    docker build -t "$NAME" . #&> /dev/null
  fi
}

env-docker() {
  mkdir -p "/data/users/$USER/envs/$ENV/run"
  NAME="${USER}.$(echo $ENV | sed 's|/|.|g')"
  if ! docker diff "$NAME" &> /dev/null; then
    docker run -d --privileged \
      --name "$NAME" \
      --hostname "$ENV" \
      --env PORT=2375 \
      --restart always \
      --volume "$HOST_DATA/users/$USER/envs/$ENV/run:/var/run" \
      jpetazzo/dind > /dev/null
  fi
}

env-session() {
  IMAGE="${USER}/$(echo $ENV | sed 's|/|.|g')"
  DOCKER_HOST_NAME="${USER}.$(echo $ENV | sed 's|/|.|g')"
  NET=''
  HOSTNAME=''
  # FIXME: This `if` should not exist, the reason why it is here is to avoid
  #        work around the current limitation that is in place which prevents
  #        docker from being configured for Devstep environments
  if [ -z "$REPO" ]; then
    NET="--net \"container:$DOCKER_HOST_NAME\""
    HOST="--env \"HOSTNAME=$ENV\""
  fi
  local session="$USER.$(date +%s)"
  local status="128"
  set +e
  while [[ "$status" == "128" ]]; do
    if [[ -f "/data/users/$USER/root/$session" ]]; then
      read cmd args <<< "$(cat /data/users/$USER/root/$session)"
      case "$cmd" in
      *rebuild)
        docker build -t "$IMAGE" .
        ;;
      *switch)
        echo "Switching to $args ... "
        ENV="$args"
        env-init
        ;;
      *commit)
        echo "Committing to $args ... "
        docker commit "$session" "$IMAGE" > /dev/null
        ;;
      esac
      rm -f "/data/users/$USER/root/$session"
    fi
    docker rm -f "$session" &> /dev/null
    docker run -it \
      --name "$session" \
      $NET \
      $HOST \
      --env "ENVY_SESSION=$session" \
      --env "ENVY_RANDOM=$RANDOM" \
      --env "DOCKER_HOST=unix:///env/run/docker.sock" \
      --volume "$HOST_DATA/.envcmd:/sbin/reload:ro" \
      --volume "$HOST_DATA/.envcmd:/sbin/rebuild:ro" \
      --volume "$HOST_DATA/.envcmd:/sbin/switch:ro" \
      --volume "$HOST_DATA/.envcmd:/sbin/commit:ro" \
      --volume "$HOST_DATA/users/$USER/envs/$ENV:/env" \
      --volume "$HOST_DATA/users/$USER/root:/root" \
      --volume "$HOST_DATA/users/$USER/home:/home/$USER" \
      --volume "$HOST_DATA:/admin" \
      "$IMAGE" $(docker-cmd)
    status=$?
  done
  docker rm -f "$session" > /dev/null
  [[ "$status" == "128" ]] || exit "$status"
}

docker-cmd() {
  NAME="${USER}/$(echo $ENV | sed 's|/|.|g')"
  if [[ "$(docker inspect -f {{.Config.Cmd}} $NAME)" != "<no value>" ]]; then
    return
  fi
  if [[ "$(docker inspect -f {{.Config.Entrypoint}} $NAME)" != "<no value>" ]]; then
    return
  fi
  echo "/bin/sh"
}

main() {
  set -e
  data-init
  user-init
  env-init
  env-session
}

main "$@"
